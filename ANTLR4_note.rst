Docs
----

- General/FAQ: https://github.com/antlr/antlr4/blob/master/doc/faq/general.md
- Index: https://github.com/antlr/antlr4/blob/master/doc/index.md
- Doc directory: https://github.com/antlr/antlr4/tree/master/doc

Listener

- https://github.com/antlr/antlr4/blob/master/doc/listeners.md
- usage example: Extract Java interface: https://media.pragprog.com/titles/tpantlr2/listener.pdf

Visitor

- https://docs.google.com/presentation/d/1XS_VIdicCQVonPK6AGYkWTp-3VeHfGuD2l8yNMpAfuQ/edit

Book

- The Definitive ANTLR 4 Reference

other example

- https://github.com/bkiers/tiny-language-antlr4

  - two visitor: https://github.com/bkiers/tiny-language-antlr4/blob/master/src/main/java/tl/antlr4/Main.java

Note
----
- ANTLR4 can use grammer to generate Lexer+Parser, so it can transform Source code into AST(Abstract Syntax Tree).
- ANTLR4 provide 2 interface to manipulate AST: Listener, Visitor

  - Listener: enter/exit non-terminal node, visit terminal node
  - Visitor: visit terminal and non-terminal node
  - parameter of handler: AST node(non-terminal node or terminal node)

- ANTLR4 basic flow

  - ``InputStream(stdin,file)  --(Lexer)-->  TokenStream  --(Parser)-->  AST + TokenStream``
  - Listener: ParseTreeWalker.walk(AST, Listener)
  - Visitor: Visitor.visit(AST)

- AST-related structure

  - RuleNode(non-terminal): <Rule>Context
  - TerminalNode
  - TokenStream
  - CharStream

- getText()

  - TokenStream.getText(RuleNode): get text of interval nodes, like non-terminal node or token between two terminal nodes

    - http://www.antlr.org/api/Java/org/antlr/v4/runtime/TokenStream.html
    - http://www.antlr.org/api/Java/org/antlr/v4/runtime/TokenStream.html#getText(org.antlr.v4.runtime.RuleContext)

  - TerminalNode.getText(): get text of this TerminalNode

    - http://www.antlr.org/api/Java/org/antlr/v4/runtime/tree/TerminalNode.html
    - http://www.antlr.org/api/Java/org/antlr/v4/runtime/tree/ParseTree.html#getText

- RuleNode

  - see JavaParser.java generated by ANTLR4
